2. stirng 相关命令

  GET key
    返回 key 所关联的字符串值。
    如果 key 不存在那么返回特殊值 nil 。
    假如 key 储存的值不是字符串类型，返回一个错误，因为 GET 只能用于处理字符串值。
    返回值：
        当 key 不存在时，返回 nil ，否则，返回 key 的值。
        如果 key 不是字符串类型，那么返回一个错误。

  MGET key [key ...]
      返回所有(一个或多个)给定 key 的值。
      如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。因此，该命令永不失败。
      返回值：
          一个包含所有给定 key 的值的列表。

  GETRANGE key start end
      返回 key 中字符串值的子字符串，字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)。
      负数偏移量表示从字符串最后开始计数， -1 表示最后一个字符， -2 表示倒数第二个，以此类推。
      GETRANGE 通过保证子字符串的值域(range)不超过实际字符串的值域来处理超出范围的值域请求。
      返回值：
          截取得出的子字符串

  GETSET key value
      将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
      当 key 存在但不是字符串类型时，返回一个错误。
      返回值：
          返回给定 key 的旧值。
          当 key 没有旧值时，也即是， key 不存在时，返回 nil 。





  SET key value [EX seconds] [PX milliseconds] [NX|XX]

    将字符串值 value 关联到 key 。
    如果 key 已经持有其他值， SET 就覆写旧值，无视类型。
    对于某个原本带有生存时间（TTL）的键来说， 当 SET 命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。
    返回值：
        在 Redis 2.6.12 版本以前， SET 命令总是返回 OK 。
        从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK 。

  SETEX key seconds value
      将值 value 关联到 key ，并将 key 的生存时间设为 seconds (以秒为单位)。
      如果 key 已经存在， SETEX 命令将覆写旧值。
      返回值：
          设置成功时返回 OK 。
          当 seconds 参数不合法时，返回一个错误。

  SETNX key value
      将 key 的值设为 value ，当且仅当 key 不存在。
      若给定的 key 已经存在，则 SETNX 不做任何动作。
      返回值：
          设置成功，返回 1 。
          设置失败，返回 0 。

  SETRANGE
      SETRANGE key offset value
      用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始。
      不存在的 key 当作空白字符串处理。
      返回值：
          被 SETRANGE 修改之后，字符串的长度。

  MSET key value [key value ...]
    同时设置一个或多个 key-value 对。
    如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值，如果这不是你所希望的效果，请考虑使用 MSETNX 命令：它只会在所有给定 key 都不存在的情况下进行设置操作。
    MSET 是一个原子性(atomic)操作，所有给定 key 都会在同一时间内被设置，某些给定 key 被更新而另一些给定 key 没有改变的情况，不可能发生。
    返回值：
        总是返回 OK (因为 MSET 不可能失败)

  MSETNX key value [key value ...]
      同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
      即使只有一个给定 key 已存在， MSETNX 也会拒绝执行所有给定 key 的设置操作。
      MSETNX 是原子性的，因此它可以用作设置多个不同 key 表示不同字段(field)的唯一性逻辑对象(unique logic object)，所有字段要么全被设置，要么全不被设置。
      返回值：
          当所有 key 都成功设置，返回 1 。
          如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。



  DECR key
      将 key 中储存的数字值减一。
      如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作。
      如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
      本操作的值限制在 64 位(bit)有符号数字表示之内。
      返回值：
          执行 DECR 命令之后 key 的值。
  DECRBY key decrement
      将 key 所储存的值减去减量 decrement 。
      如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECRBY 操作。
      如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
      本操作的值限制在 64 位(bit)有符号数字表示之内。
      返回值：
          减去 decrement 之后， key 的值。


  INCR key

      将 key 中储存的数字值增一。
      如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。
      如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
      返回值：
          执行 INCR 命令之后 key 的值。

  INCRBY key increment

      将 key 所储存的值加上增量 increment 。
      如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。
      如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
      本操作的值限制在 64 位(bit)有符号数字表示之内。
      返回值：
          加上 increment 之后， key 的值。

  INCRBYFLOAT key increment
      为 key 中所储存的值加上浮点数增量 increment 。
      如果 key 不存在，那么 INCRBYFLOAT 会先将 key 的值设为 0 ，再执行加法操作。
      如果命令执行成功，那么 key 的值会被更新为（执行加法之后的）新值，并且新值会以字符串的形式返回给调用者。
      返回值：
          执行命令之后 key 的值

  
  STRLEN key
      返回 key 所储存的字符串值的长度。
      当 key 储存的不是字符串值时，返回一个错误。
      返回值：
          字符串值的长度。
          当 key 不存在时，返回 0 。

  APPEND key value
    如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。
    如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。
    返回值：
        追加 value 之后， key 中字符串的长度。








