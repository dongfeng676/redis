redis 学习
Redis 是一款依据BSD开源协议发行的高性能Key-Value存储系统（cache and store）。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(hashes), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。

1.key 相关命令
  
  TYPE key
    返回 key 所储存的值的类型。
    返回值：
        none (key不存在)
        string (字符串)
        list (列表)
        set (集合)
        zset (有序集)
        hash (哈希表)

　　DEL key [key ...]
      删除给定的一个或多个 key 
      不存在的 key 会被忽略。
      返回值：
	        被删除 key 的数量。

  EXISTS key
      检查给定 key 是否存在。
      返回值：
          若 key 存在，返回 1 ，否则返回 0 

  RANDOMKEY
    从当前数据库中随机返回(不删除)一个 key 。
    返回值：
        当数据库不为空时，返回一个 key 。
        当数据库为空时，返回 nil 

  KEYS pattern
    查找所有符合给定模式 pattern 的 key 。
    KEYS * 匹配数据库中所有 key 。
    KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。
    KEYS h*llo 匹配 hllo 和 heeeeello 等。
    KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。
    特殊符号用 \ 隔开
    KEYS 的速度非常快，但在一个大的数据库中使用它仍然可能造成性能问题，如果你需要从一个数据集中查找特定的 key ，你最好还是用 Redis 的集合结构(set)来代替。
    返回值：
        符合给定模式的 key 列表。

  MOVE key db
    将当前数据库的 key 移动到给定的数据库 db 当中。
    如果当前数据库(源数据库)和给定数据库(目标数据库)有相同名字的给定 key ，或者 key 不存在于当前数据库，那么 MOVE 没有任何效果。
    返回值：
        移动成功返回 1 ，失败则返回 0 。
    redis默认使用数据库 0，为了清晰起见，这里再显式指定一次。
    SELECT 0  使用数据库 0
    SELECT 1  使用数据库 1
    SELECT 2  使用数据库 2


  TTL key
    以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
    返回值：
        当 key 不存在时，返回 -2 。
        当 key 存在但没有设置剩余生存时间时，返回 -1 。
        否则，以秒为单位，返回 key 的剩余生存时间。

  EXPIRE key seconds
      为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。
      在 Redis 中，带有生存时间的 key 被称为『易失的』(volatile)。
      生存时间可以通过使用 DEL 命令来删除整个 key 来移除，或者被 SET 和 GETSET 命令覆写(overwrite)，这意味着，如果一个命令只是修改(alter)一个带生存时间的 key 的值而不是用一个新的 key 值来代替(replace)它的话，那么生存时间不会被改变。
      比如说，对一个 key 执行 INCR 命令，对一个列表进行 LPUSH 命令，或者对一个哈希表执行 HSET 命令，这类操作都不会修改 key 本身的生存时间。
      另一方面，如果使用 RENAME 对一个 key 进行改名，那么改名后的 key 的生存时间和改名前一样。
      RENAME 命令的另一种可能是，尝试将一个带生存时间的 key 改名成另一个带生存时间的 another_key ，这时旧的 another_key (以及它的生存时间)会被删除，然后旧的 key 会改名为 another_key ，因此，新的 another_key 的生存时间也和原本的 key 一样。
      使用 PERSIST 命令可以在不删除 key 的情况下，移除 key 的生存时间，让 key 重新成为一个『持久的』(persistent) key 。

      过期时间的精确度
          在 Redis 2.4 版本中，过期时间的延迟在 1 秒钟之内 —— 也即是，就算 key 已经过期，但它还是可能在过期之后一秒钟之内被访问到，而在新的 Redis 2.6 版本中，延迟被降低到 1 毫秒之内。
      返回值：
          设置成功返回 1 。
          当 key 不存在或者不能为 key 设置生存时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的生存时间)，返回 0 。

  PERSIST key
      移除给定 key 的生存时间，将这个 key 从『易失的』(带生存时间 key )转换成『持久的』(一个不带生存时间、永不过期的 key )。
      返回值：
          当生存时间移除成功时，返回 1 .
          如果 key 不存在或 key 没有设置生存时间，返回 0 。


  RENAME key newkey
      将 key 改名为 newkey 。
      当 key 和 newkey 相同，或者 key 不存在时，返回一个错误。
      当 newkey 已经存在时， RENAME 命令将覆盖旧值。
      返回值：
          改名成功时提示 OK ，失败时候返回一个错误。

  RENAMENX key newkey
      当且仅当 newkey 不存在时，将 key 改名为 newkey 。
      当 key 不存在时，返回一个错误。
      返回值：
          修改成功时，返回 1 。
          如果 newkey 已经存在，返回 0 。

  SORT
      SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC | DESC] [ALPHA] [STORE destination]
      返回或保存给定列表、集合、有序集合 key 中经过排序的元素。
      排序默认以数字作为对象，值被解释为双精度浮点数，然后进行比较。



